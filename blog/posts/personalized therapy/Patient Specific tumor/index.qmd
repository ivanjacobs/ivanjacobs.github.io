---
title: "Are tumors patient specific"
author: "Ivan Jacobs"
date: \today
categories: [Personalized therapy, networks, machine learning, deep learning]
image: "Figure 2.jpeg"
execute:
  echo: false
---

# Are tumors patient specific

To address this question we compare the characteristics and derived network measures of antibody--peptide epitopes for patient 1 and patient 2 to show the patient-specific nature of tumors expressed through peptides originating from tumor-induced mutations. To do so, we apply statistical analysis techniques such as multivariate analysis of variance (MANOVA) on the network measures to evaluate if they are statistically significantly different per patient. In addition, we look at how different network measures correlate with PMBC values per patient. We apply a structure learning algorithm to the data to learn the structure of the directed acyclic graph (DAG) to analyze the causality of data features, i.e., network measures and the matched PBMC values. Finally, we compare the performance of personalized models on unseen data from different patients to understand if models can generalize over unseen data from different patients.

# Data Structure

We chose a network representation with layers to study the diverse relations and interactions between the components. These network representations are called multiplex networks, where a node corresponds to a "physical object," while node-layer pairs are different instances of the same object.

For instance, a node could represent an online user, while node-layer pairs would represent different accounts of the same user in different online social networks; or a node could represent a social actor, while node-layer pairs would represent different social roles (e.g., friend, worker, and family member) of the same social actor; or a node could stand for a location in a transportation network, while node-layer pairs would represent stations of different transportation modes (e.g., streets, highways, and subways).

The connection between nodes and node-layer pairs is given by the notion of supra-nodes: i.e., cliques in the supra-graph formed by node-layer pairs that are instances of the same object. To correctly represent a physical object in the different layers of the multiplex network, we break down the peptides into amino acids and the amino acids to their smallest component atoms and their connection bonds. The layers coordinate, atom, monomer, polymer, complex, and system are introduced. The coordinate layer represents the three-dimensional coordinates of every atom in the system. The atom layer, as shown in @fig-multiplex, is the layer that represents the atoms and their bonds that construct objects in the monomer layer, e.g., an amino acid.

![](images/fams-09-1150381-g009.jpg){#multiplex width="600"}

```{r}

packages <-
  c(
    "tidyverse",
    "data.table",
    "devtools",
    "ggmap",'ggraph','igraph','huge','tidygraph','GGally','sna','network','ggdendro','viridis','GGally','bnlearn','xtable','janitor','dplyr',
    'kableExtra','knitr','dataMeta','tibbletime','lubridate','sqldf','plyr','ggforce','stringi','ggridges','ggplot2','hrbrthemes','pander','tidyr','broom','stargazer','texreg','sjPlot','sjmisc','sjlabelled','ggpointdensity','bnlearn','rstatix'


  )
pationsOneandTwoPath<-"D:/study/rit/DSCI.799.01-GraduateCapstone/HLAPeptideInteraction/datasets/BothPatients.csv"


install.packages(setdiff(packages, rownames(installed.packages())))
for (package in packages) {
  library(package, character.only = TRUE)
}

pationsOneandTwoDf <- fread(pationsOneandTwoPath)

# names(pationsOneandTwoDf) <- names(pationsOneandTwoDf) %>%
#   stringr::str_replace_all("\\s", "")

```

# Data

The data consists of the mRNA and DNA sequences of 2 cancer patients where sequences areas of mutation have been selected and potential peptide candidates have been identified. Enzyme-linked immunospot (ELISpot) assays have been performed with the HLA alleles and peptides from both patients producing the values we wish to predict.

## Data Overview

### Data Dictionary

The produced data's attributes as listed in @tbl-data_dict_assays will give us the ability to create the network structures that represent the relationships between HLA alleles and peptides. This network structures will give us better insights and permit to apply analytical approaches to predict HLA-peptide interactions expressed as discretized class representing ranges of the numbers of matched blood mononuclear cells (PBMC's).

```{r}
#| tbl-cap: Data dict ELISpot assays
#| label: tbl-data_dict_assays
#| tbl-pos: 'h'

var_desc <- c(names(pationsOneandTwoDf))
var_type <- replicate(length(var_desc), 0)
linker <- build_linker(pationsOneandTwoDf, variable_description = var_desc, variable_type = var_type)
dict <- build_dict(pationsOneandTwoDf, linker = linker, option_description = NULL, 
                   prompt_varopts = FALSE)

kable(as.data.frame(as_tibble(dict)), format="latex", booktabs=TRUE) %>% 
  kable_styling(latex_options=c("scale_down",'HOLD_position'))
```

### Data Sample

A sample from the data as visualized in @tbl-data_sample_assays, shows 10 values of the peptide's amino acids sequence with one letter code, the number of peptides per assay, the patients HLA's and the measured ELISpot value i.e. blood mononuclear cells (PBMC's).

```{r}
#| tbl-cap: Sample ELISpot assays 
#| label: tbl-data_sample_assays
#| tbl-pos: 'h'
kable(head(pationsOneandTwoDf), format="latex", booktabs=TRUE) %>% kable_styling(latex_options=c("scale_down",'HOLD_position')) 
```

```{r}
pationsOneandTwoDf<-as.data.frame(pationsOneandTwoDf)
names(pationsOneandTwoDf) <- names(pationsOneandTwoDf) %>%
  stringr::str_replace_all("\\s", "")
pationsOneandTwoDf_extended<-copy(pationsOneandTwoDf)
aminos_nested<-pationsOneandTwoDf%>%mutate(all_aminos=stri_split_lines(`Peptide'saminoacidssequence`,omit_empty =T))%>%select(all_aminos)
aminos_all_concat<-pationsOneandTwoDf%>%mutate(all_aminos=str_replace_all(`Peptide'saminoacidssequence`,"[\r\n]" , ""))%>%select(all_aminos)
pationsOneandTwoDf_extended[,c('nr_amino_peptide')]<-apply(aminos_all_concat,1,nchar)
```

{{< pagebreak >}}

### ELISpot value Distribution

As shown in @fig-elispot_values_hist, we wish to look at the distribution of the ELISpot values for both patients.The medians from both patients are different as well as the distribution of the values. The values of patient one are restricted to a smaller range and show an outlier in the upper quartile. In contrast patient two shows values distributed over a wider range, again with a wider distribution in the upper quartile.

We can conclude that the patients show different distributions of observed PBMC values, i.e. the PBMC values are patient specific.

```{r ,results="asis"}
#| fig-cap: ELISpot histogram plot
#| label: fig-elispot_values_hist
#| fig-pos: 'h'


box_plot<-ggplot(pationsOneandTwoDf,aes(x=factor(0),y=pationsOneandTwoDf$ELISPOTvalue, fill=Patient,color=Patient)) +
  geom_boxplot(fill = "lightblue") +    
  # scale_y_continuous(breaks = NULL,trans = 'log') +
  xlab("")+ylab('')+
  # geom_vline(xintercept=c(median(d$y)))+
  scale_fill_brewer(palette="Dark2")+
 coord_flip() +   
  theme(axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank())+
  theme(legend.position="top")+
  theme_classic()


mu <- ddply(pationsOneandTwoDf, "Patient", summarise, grp.mean=mean(ELISPOTvalue))
grp.quantle <- ddply(pationsOneandTwoDf, "Patient", summarise, grp.quantile=quantile(ELISPOTvalue))
grp.median <- ddply(pationsOneandTwoDf, "Patient", summarise, grp.median=median(ELISPOTvalue))

hist_plot_p1<- ggplot(pationsOneandTwoDf[pationsOneandTwoDf$Patient=="one",], aes(x=ELISPOTvalue))+
  geom_histogram( aes(y=..density..),color='red',fill='red',alpha=0.2, position="identity")+
  geom_density(alpha=0.2)+
  # geom_vline(data=mu[mu$Patient=="one",], aes(xintercept=grp.mean),linetype="dashed")+
  # geom_vline(data=grp.quantle[grp.quantle$Patient=="one",], aes(xintercept=grp.quantile), linetype="dashed")+
  # geom_vline(data=grp.median[grp.median$Patient=="one",], aes(xintercept=grp.median), linetype="dashed")+
  # 
  # geom_vline(xintercept=quantile(d$y),aes(fill=Patient,color=Patient),linetype="dashed")+
  # geom_vline(xintercept=c(median(d$y)),aes(fill=Patient,color=Patient),linetype="dashed")+

  theme_classic() +
  scale_color_brewer(palette="Dark2")+
  scale_fill_brewer(palette="Dark2")+
  theme(legend.position="top")+
  labs(x="ELISpot value Patient One", y = "Density")


hist_plot_p2<- ggplot(pationsOneandTwoDf[pationsOneandTwoDf$Patient=="two",], aes(x=ELISPOTvalue))+
  geom_histogram( aes(y=..density..),color='blue',fill='blue',alpha=0.6, position="identity")+
  geom_density(alpha=0.2)+
  # geom_vline(data=mu[mu$Patient=="two",], aes(xintercept=grp.mean),linetype="dashed")+
  # geom_vline(data=grp.quantle[grp.quantle$Patient=="two",], aes(xintercept=grp.quantile), linetype="dashed")+
  # geom_vline(data=grp.median[grp.median$Patient=="tow",], aes(xintercept=grp.median), linetype="dashed")+
  # 
  # geom_vline(xintercept=quantile(d$y),aes(fill=Patient,color=Patient),linetype="dashed")+
  # geom_vline(xintercept=c(median(d$y)),aes(fill=Patient,color=Patient),linetype="dashed")+

  theme_classic() +
  scale_color_brewer(palette="Dark2")+
  scale_fill_brewer(palette="Dark2")+
  theme(legend.position="top")+
  labs(x="ELISpot value Patient Two", y = "Density")

# hist_plot<-  
#   ggplot(pationsOneandTwoDf) +
#   geom_histogram(aes(x = y,y = (..count..)/sum(..count..), fill=Patient,color=Patient),
#                alpha=0.2,  position = "identity", 
#               ) +
#   geom_vline(xintercept=quantile(d$y),aes(fill=Patient,color=Patient),linetype="dashed")+
#   geom_vline(xintercept=c(median(d$y)),aes(fill=Patient,color=Patient),linetype="dashed")+
# 
#   # scale_x_continuous(breaks = NULL,trans = 'log') +
#   scale_fill_brewer(palette="Dark2")+
# 
#   ylab("Relative Frequency") +xlab('ELISpot value')+
#   theme_classic()

# df<-pationsOneandTwoDf[-c(out_ind),]
elispot_values_hist<-cowplot::plot_grid( box_plot, hist_plot_p1,hist_plot_p2,
                   ncol = 1,
                   align = 'v', axis = 'lr')  

ggsave("images/fig-elispot_values_hist.jpg", elispot_values_hist, dpi = 320)
```

{{< pagebreak >}}

### Peptides nr. vs ELISpot Value

In @fig-elispot_values_violin, we graph a violin plot to analyze how the number of peptides in a system correlate with the PBMC values and specific patient. We see that patient two has systems with exclusively one peptide in contrast to patient one that has systems with one, two and three peptides. Patient one has sa high concentration of systems with only one peptide. The correlation between number of peptides and ELISPot values is not clear. Systems with one peptide seem to produce higher PBMC values in contrast to systems with multiple peptides. This conclusion should be take with caution since only patient one has systems with more than one peptide.

```{r,results="asis"}
#| fig-cap: ELISpot violin plot
#| label: fig-elispot_values_violin
#| fig-pos: 'h'
elispot_values_violin<-ggplot(pationsOneandTwoDf, 
           aes(x = as.factor(Numberofpeptides),
           y = ELISPOTvalue,color=pationsOneandTwoDf[,c('Patient')])) +
  geom_violin() +
  geom_sina()+
  theme_classic() +
  scale_color_brewer(palette="Dark2")+
  scale_fill_brewer(palette="Dark2")+
  theme(legend.position="top")+
  labs(x="Number of peptides", y = "ELISpot value",color='Patient')
 
ggsave("images/fig-elispot_values_violin.jpg", elispot_values_violin, dpi = 320)
```

{{< pagebreak >}}

### Number of Amino acids vs ELISpot values

In @fig-charts_p_one, we analyze the distribution of ELISpot values in relation to the total number of Amino Acids originating from the peptides in a system. We look at these correlations for both patients individually and together. Here the difference between the patients is not so clear, we observe a pattern in both patients where the lower and the upper range of the number of patients correlate with a high ELISPot value. It is notisible that systems with 30 amino acids consistently produce PBMC values above 500 for patient two. We can conclude that systems with higher total number of amino acids in the peptides tend to produce higher ELISpot values.

```{r,results="asis"}
#| label: fig-charts_p_one
#| fig-cap: Patient vs Tot. nr. Amino acids
#| fig-pos: 'h'
#| fig-subcap: 
#|   - "Patient One "
#|   - "Patient Two"
#|   - "All Patients"
#| layout: [[45,-10, 45], [100]]
charts_p_one<-ggplot(pationsOneandTwoDf_extended[pationsOneandTwoDf_extended$Patient=='one',],
           aes(x = ELISPOTvalue,
            y = as.factor(nr_amino_peptide), fill = ..x..)) +
    geom_density_ridges_gradient(alpha=0.6,scale = 3, rel_min_height = 0.01)+
  scale_fill_viridis(name = "ELISpot value", option = "C") +
   theme_ridges() +
    theme(
      legend.position="none",
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 6)
    )+
labs(y="Tot Number of amino acids", x = "ELISpot value")
ggsave("images/fig-charts_p_one.jpg", charts_p_one, dpi = 320)
charts_p_two<-ggplot(pationsOneandTwoDf_extended[pationsOneandTwoDf_extended$Patient=='two',],
           aes(x = ELISPOTvalue,
            y = as.factor(nr_amino_peptide), fill = ..x..)) +
    geom_density_ridges_gradient(alpha=0.6,scale = 3, rel_min_height = 0.01)+
  scale_fill_viridis(name = "ELISpot value", option = "C") +
   theme_ridges() +
    theme(
      legend.position="none",
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 6)
    )+
labs(y="Tot Number of amino acids", x = "ELISpot value")
ggsave("images/fig-charts_p_two.jpg", charts_p_two, dpi = 320)
charts_p_all<-ggplot(pationsOneandTwoDf_extended,
           aes(x = ELISPOTvalue,
            y = as.factor(nr_amino_peptide), fill = ..x..)) +
    geom_density_ridges_gradient(alpha=0.6,scale = 3, rel_min_height = 0.01)+
  scale_fill_viridis(name = "ELISpot value", option = "C") +
  theme_ridges() + 
  theme(
  legend.position = "none",
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 6)
    )+
labs(y="Tot Number of amino acids", x = "ELISpot value")
ggsave("images/fig-charts_p_all.jpg", charts_p_all, dpi = 320)
```

{{< pagebreak >}}

### Linear Model coefficient analysis

In order to better understand the potential influence of particular data attributes we apply a linear regression model. Analyzing the coefficients we can understand the predictors influence on the produced PBMC values.

From the results shown in @tbl-lmodel, we can see that the total number of amino acids in a system have positive linear relationship with the produced PBMC's for patient one and negative for patient two. The performance of the model differs between the two patients and the same coefficients have different linear relationship on the produced PBMC for the two patients. Hence the relationship between these coefficients and the matched PBMC value is patient specivif. This observation indicates that tumor mutations and immune system response are not only tumor but also patient specific.

```{r}

lm.fit<-lm(ELISPOTvalue~nr_amino_peptide+Numberofpeptides,data=pationsOneandTwoDf_extended)
lm.fit_p_two<-lm(ELISPOTvalue~nr_amino_peptide+Numberofpeptides,data=pationsOneandTwoDf_extended[pationsOneandTwoDf_extended$Patient=="two",])
lm.fit_p_one<-lm(ELISPOTvalue~nr_amino_peptide+Numberofpeptides,data=pationsOneandTwoDf_extended[pationsOneandTwoDf_extended$Patient=="one",])
# 
# lm.fit_p_one%>%tidy()%>%
#   mutate(
#     p.value = scales::pvalue(p.value),
#     term = c("Intercept", "Tot.Nr. Amino Acids", "Nr. of Peptides")
#   ) %>%
#   kable(
#    format="latex", booktabs=TRUE,
#     col.names = c("Predictor", "B", "SE", "t", "p"),
#     digits = c(0, 2, 3, 2, 3),
#   )  %>%
#   kable_styling(latex_options=c("scale_down",'HOLD_position'))

```

```{r,results="asis"}
#| label: tbl-lmodel
#| tbl-cap: Linear Regression model comparison
#| tbl-pos: 'h'
tab_model(lm.fit,lm.fit_p_one,lm.fit_p_two,
          show.ci=FALSE,show.stat=FALSE,show.se=F,
            dv.labels = c("All patients", "Patient 1.", "Patient 2."),
            string.pred = "Coeffcient",
            string.ci = "Conf. Int (95%)",
            string.p = "P-Value",
            pred.labels = c("Intercept", "Tot.Nr. Amino Acids", "Nr. of Peptides"))

```

```{r}
pationsOneandTwoNetworkAttrPath<-'D:\\study\\rit\\DSCI.799.01-GraduateCapstone\\HLAPeptideInteraction\\all_system_attributes_all_patients.csv'
pationsOneandTwoNetworkAttrDf <- fread(pationsOneandTwoNetworkAttrPath)
pationsOneandTwoNetworkAttrDf<-as.data.frame(pationsOneandTwoNetworkAttrDf)



```

{{< pagebreak >}}

# Generated Data Structure

The peptide, as illustrated in @fig-Peptide, is a short chain of amino acids (typically 2 to 50) linked by chemical bonds (called peptide bonds). The HLA cell-surface protein, as illustrated in @fig-HLA, is a chain of amino acids that is responsible for the regulation of the immune system. To understand HLA-peptide interactions we need to understand how the peptide is binding, as illustrated in @fig-Complex, to the HLA in the context of a complex.

![Peptide](images/paste-77AA87FC.png "Peptide"){#fig-Peptide width="150" fig.pos="h"}

![HLA](images/paste-AF204FE5.png "HLA-Protein"){#fig-HLA fig.pos="h"}

![Complex](images/paste-2CA8D23F.png "Complex"){#fig-Complex fig.pos="h"}

{{< pagebreak >}}

## Multiplex Network

The HLA-peptide interaction is dependent of the chemical reactions of atoms belonging to amino acids that will fall close enough in 3-dimensional space. To understand and study the diverse types of relations or interactions that exist between the components we chose a network representation with a notion of layers.

This type of networks is called multiplex networks as shown in @fig-multiplex where a node corresponds to a "physical object," while node-layer pairs are different instances of the same object. For instance a node could represent an online user, while node-layer pairs would represent different accounts of the same user in different online social networks; or a node could

![Multiplex](images/paste-41374747.png "Multiplex"){#fig-multiplex fig-align="right" width="150" fig.pos="h"}

represent a social actor, while node-layer pairs would represent different social roles (friend, worker, family member) of the same social actor; or a node could stand for a location in a transportation network, while node-layer pairs would represent stations of different transportation modes (e.g., streets, highways, and subways).

The connection between nodes and node-layer pairs is given by the notion of supra-nodes: i.e., cliques in the supra-graph formed by node-layer pairs that are instances of the same object.

To correctly represent a physical object in the different layers of the multiplex we break down the peptides to amino acids and the amino acids to their smallest component atoms and their connections bonds. The layers coordinate, atom, monomer, polymer, complex and system are introduced.

{{< pagebreak >}}

The **Atom layer**, as shown in @fig-MultiplexArchitecture, is the layer that represents the atoms and their bonds that construct objects in the monomer layer e.g., amino acid.

The **Monomer laye**r, as shown in @fig-MultiplexArchitecture, represents the objects of type monomer that is a molecule of any of a class of compounds, mostly organic, that can react with other molecules to form very large molecules, or polymers.

The **Polymer layer**, as shown in @fig-MultiplexArchitecture, represents the objects of type polymer. Polymer is any object of a class of natural or synthetic substances composed of very large molecules, called macromolecules, which are multiples of monomers.

The **Complex layer**, as shown in @fig-MultiplexArchitecture, represents polymers that form a complex by binding to each other e.g. peptide binds to a HLA to form a complex.

The **System layer** represents the totality of complexes that exist in an ELISpot assay and is representative of multiple HLA-peptide complexes. One system could be represented as shown in @fig-MultiplexArchitecture where we are omitting the coordinates layer.

![Multiplex Architecture](images/paste-980BA7D9.png "Multiplex Architecture"){#fig-MultiplexArchitecture fig.pos="h" width="450"}

{{< pagebreak >}}

## Network Topological Attributes

To compare and predict systems interactions and behavior we will look at measures and metrics that these networks express. Calculating and assigning these metrics for every individual system permits us to create a dataset that can be used in statistical, machine and deep learning analysis approaches. Additionally, we apply deep learning on graphs on the individual systems to make predictions of their interactions in this case the ELISpot result.

```{r}

# {r,results="asis", fig.cap=paste(sprintf("\\label{%s}", names_attr_n_sp), "Patient Matched PBMC's vs.", names_attr)}

names_attr<- c( "Size largest Component", "Avg. Spectral clustering", "Global Clustering Coeffiecient","Transitivity","Average degree","Average Clustering","Degree Centrality","Average Core hubs","Density","Vectors","Average Betweenness Centrality","Closeness Centrality","Degree Pearson Correlation Coefficient","Eigenvector Centrality","Page Rank Centrality", "Attribute Assortativity Coefficient Type","Attribute Assortativity Coefficient Source")
names_attr_n_sp<-names_attr%>%stringr::str_replace_all("\\s", "")
pationsOneandTwoNetworkAttrDf_corr<-copy(pationsOneandTwoNetworkAttrDf)
names(pationsOneandTwoNetworkAttrDf_corr)<-c('Patient', "Size largest Component", "Avg. Spectral clustering", "Global Clustering Coeffiecient","Transitivity","Average degree","Average Clustering","Degree Centrality","Average Core hubs","Density","Vectors","Average Betweenness Centrality","Closeness Centrality","Degree Pearson Correlation Coefficient","Eigenvector Centrality","Page Rank Centrality", "Attribute Assortativity Coefficient Type","Attribute Assortativity Coefficient Source",'Matched PBMC')


combinations<-as.matrix(expand.grid(names_attr,c('Patient'),c('Matched PBMC')))

# for(row in 1:nrow(combinations) ){
#   # cat("  \n###","Corr. Matrix", as.vector(as.matrix(combinations)[row,1]), "\n")
#   p_r<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
#   # print(p_r)
#   
#   plots[[row]]<-p_r
#   # print(ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,])))
#   # cat(sprintf("Figure \\ref{%s} is a Graph \n\n",names_attr_n_sp[row]))
#  # cat("  \n")
#  
# }
```

### Size largest Component

In undirected networks typically exists large components that fill most of the network, while the rest of the network is divided into a lot of small disconnected components. The size of the largest connected component can be expressed by: $S=1-e^{-cS}$ introduced by Erdos and Renyi in 1958 where $c$ denotes mean degree or the average of in- and out-going edges.\
\
We compute the size of the largest component $S$ of each system and and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

\
As visualized in @fig-SizelargestComponent, even though the medians of both patients are close, the values of patient one are better distributed with a large portion in the lower quartile. Patient two shows a high concentration around the median and the upper quartile and an outlier in the upper whisker.

\
When considering the $S$ values over all the systems, we observe a positive correlation with the matched PBMC's with statistical significance shown by a $p-value <0.10$.\
This could mean that systems that create larger connected components, have a higher chance of producing a higher PBMC value. This is confirmed by the distribution of the PBMC values of patient two, showing overall significantly higher values than patient one, and a distribution of the size of the largest components that is concentrated around the median of 30 and the upper quartile.\
When looking at the individual patients, we observe that patient two shows inverse correlation, even though not significant, with the matched PBMC's. Patient one shows a positive correlation with matched PBMC's.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Size largest Component
#| label: fig-SizelargestComponent
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5
p_ <- GGally::print_if_interactive
row<-1
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
row<-2
ggp2<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))

ggp1

```

```{r}
ggsave("images/fig-SizelargestComponent.jpg", ggp1, dpi = 320)
```

{{< pagebreak >}}

### Avg. Spectral clustering

A fast approach to separate a network in communities is by applying spectral modularity maximization by assigning a node to one of two groups communities. If we consider $s$ as a vector in n-dimensional space, that implies that the vector must point to one of the corners of the n-dimensional hypercube. By creating a relaxed method where $s$ is aloud to take any value of $|s|=\sqrt{n}$ the form we arrive at a matrix notation $Bs=\beta s$. Hense the optimal $s$ is on of the eigenvectors of the modularity matrix and $\beta$ is the corresponding eigenvalue. We can find which eigenvector by applying $$Q=\dfrac{n}{4m}\beta$$ Since $s^Ts=n$ we can maximize the inner product $s^Tu=\sum_is_iu_i$. The maximum is achieved when $s_iu_i$ is positive for all $i$, which occurs when $s_i$ has the same sign as $u_i$ for all $i$: $$s_i=\begin{cases}
+1, & \text{if } u_i>0\\
-1, & \text{if }u_i<0
\end{cases}$$

This leads to a simple approach, we calculate the eigenvector of ton the modularity matrix corresponding to the highest eigenvalue and assign nodes ot communities according to the signs of the elements in this vector.

We slightly modify it by assigning zero to the nodes that correspond to negative eigenvalues instead of -1: $$s_i=\begin{cases}
+1, & \text{if } u_i>0\\
0, & \text{if }u_i<0
\end{cases}$$ Then we calculate the average $\dfrac{1}{n}\sum_{s=1}^{n}s_i$ of the assigned values that produces a value between zero and one and is indicative of how balanced is the distribution of the nodes between two communities.

In @fig-Laplacianclustering we calculate the avg. spectral clustering for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are quite similar. Patient two produces values that are skewed towards the lower quartile while patient one values are better distributed around the median. Even though combined data of both patients show a inverse Pearson correlation coefficient with the matched PBMC's, patient one shows a positive correlation with statistical significance indicated by a $p-value<0.05$.

This might indicate that there is a difference in the produced PMBC's between patients with similar avg. spectral clustering values. In other words the systems of individual patients react differently to a similar internal node distribution between two communities.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Avg. Spectral clustering
#| label: fig-Laplacianclustering
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

ggp2

```

```{r}

ggsave("images/fig-Laplacianclustering.jpg", ggp2, dpi = 320)
```

{{< pagebreak >}}

### Global Clustering Coefficient

Clustering coefficient is a measure of the degree to which vertices in a network tend to create tightly knit groups, closed triads: $$ C=\dfrac{(\text{number of closed paths of length two})}{(\text{number of paths of length two})}$$ C=1 implies perfect transitivity,a networks whose components are all closed triads. C=0 implies no closed triads. Concretely we apply the Watts and Strogatz defined a clustering coefficient that quantifies the likelihood that two nodes that are connected to the same node are also connected to each other. degree to which vertices in a network tend to create tightly knit groups, closed triads: $$ C=\dfrac{(\text{number of triangles})*3}{(\text{number of connected triples})}$$ Concretely we apply the following formula $$C=\dfrac{1}{n}\sum_{u=1}^{n}c_u$$ where $n$ is the number of nodes and $c_u$ is: $$c_u = \frac{2 T(u)}{deg(u)(deg(u)-1)}$$ where $T(u)$ is the number of triangles through node $u$ and $deg(u)$ is the degree of $u$.

In @fig-GlobalClusteringCoeffiecient we calculate global clustering coefficient for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are quite similar. Patient two produces values that are skewed towards the upper quartile while patient one values are better distributed around the median. Combined data of both patients shows a positive Pearson correlation coefficient,with statistical significance indicated by a $p-value<0.05$, with the matched PBMC's. Patient one and two show a similar positive correlation.

This observation can imply that systems with high clustering coefficient, i.e. systems where monomers, polymers and atoms that are connected to the same monomer, polymer or atom have a high likelihood to be connected to each other, will produce a higher number of matched PBMC's.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Global Clustering Coeffiecient
#| label: fig-GlobalClusteringCoeffiecient
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-3
 ggp<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
```

```{r}
ggsave("images/fig-GlobalClusteringCoeffiecient.jpg", ggp, dpi = 320)
```

{{< pagebreak >}}

### Transitivity

The fundamental type of relation between nodes in a network is "connected by an edge." If the "connected by an edge" relation were transitive it would mean that if node u is connected to node v, and v is connected to w, then u is also connected to w. $$T = 3\frac{\#triangles}{\#triads}$$ where "triads" are two edges with a shared vertex and triangles are loops of length three.

In @fig-Transitivity we calculate the transitivity for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are quite similar. Patient one produces values that are skewed towards the lower quartile while patient two values are better distributed around the median. Combined data of both patients show a positive Pearson correlation coefficient,with no statistical significance, with the matched PBMC's. Patient one and two show a similar positive correlation.

This might confirm the observed correlation with the global clustering coefficient.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Transitivity
#| label: fig-Transitivity
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-4
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
```

```{r}
ggsave("images/fig-Transitivity.jpg", ggp1, dpi = 320)
```

{{< pagebreak >}}

### Average Degree

The average degree of a network:$$\langle k \rangle=2\frac{\text{number of edges}}{\text{number of nodes}}$$ is related to the density of the network, where in a dense network the average degree grows linearly with the number of nodes, while in a sparse network it grows sub linearly.

In @fig-AverageDegree we calculate $\langle k \rangle$ for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are some what similar. Patient one produces values that are skewed towards the lower quartile while patient two values are better distributed around the median. The median of patient one is significantly higher.

Combined data of both patients show an inverse Pearson correlation coefficient, with no statistical significance, with the matched PBMC's. Patient two shows a similar positive correlation in contrast to patient one that shows a positive correlation.

From these observations we could imply that impact of the density of the network on the matched PBMC's is patient specific.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Average Degree
#| label: fig-AverageDegree
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-5
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-AverageDegree.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Degree Centrality

A large volume of work is dedicated to centrality. The question which are the most important vertices in or central nodes in a network. There are many possible definitions of importance and consequently many centrality measures. Degree, the number of incoming and outgoing edges a node has, is sometimes called degree centrality to emphasize its use as a centrality measure. Useful though it is quite a crude measure as it awards a node one centrality point for every neighbor it has. But not all neighbors are necessarily equivalent.

In @fig-DegreeCentrality we calculate the degree centrality for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one produces values that are mostly skewed towards the lower quartile while patient two are skewed towards the upper quartile. The median of patient one is significantly higher.

Combined data of both patients show a positive Pearson correlation coefficient with a statistical significance indicated by a $p-value<0.05$, with the matched PBMC's. Patient two shows a similar positive correlation in contrast to patient one that shows a correlation near to zero.

From these observations we could imply that impact of high number of incoming and outgoing edges from the vertices in the system have a positive impact on the matched PBMC's. There is however a patient specific aspect in the magnitude of the positive impact.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Degree Centrality
#| label: fig-DegreeCentrality
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-7
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))

ggsave("images/fig-DegreeCentrality.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Average Core Hubs

Average core hubs is a measure of the average of the degrees of the top-100 hubs in a system:$$\dfrac{1}{n}\sum_{i=1}^{100}k_i$$ where $k$ is the degree of vertice i.

In @fig-AverageCoreHubs we calculate the average core hubs for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one produces values that are mostly skewed towards the lower quartile while patient two skewed towards the upper quartile. The median of patient one is significantly higher.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance indicated by a $p-value<0.01$, with the matched PBMC's. Patient two shows a similar positive correlation in contrast to patient one that shows a correlation near to zero.

From these observations we could imply that impact of high number of incoming and outgoing edges from the vertices in the system have a positive impact on the matched PBMC's. There is however a patient specific aspect in the magnitude of the positive impact. This observation agrees with the observations of Degree Centrality and its correlation with the matched PBMC values.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Average Core Hubs
#| label: fig-AverageCoreHubs
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-8
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-AverageCoreHubs.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Density

Density of a graph is the ratio between the edges present in a graph and the maximum number of edges that the graph can contain. Conceptually, it provides an idea of how dense a graph is in terms of edge connectivity. $$ d = \frac{m}{n(n-1)}$$ where `n` is the number of nodes and `m` is the number of edges in a graph `G`.

In @fig-Density we calculate the density for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one produces values that are mostly skewed towards the lower quartile while patient's two are skewed towards the upper quartile. The median of patient one is significantly higher.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance indicated by a $p-value<0.01$, with the matched PBMC's. Patient two shows a similar positive correlation in contrast to patient one that shows a correlation near to zero.

From these observations we could imply that a high number of incoming and outgoing edges from the vertices in the system have a positive impact on the matched PBMC's. There is however a patient specific aspect in the magnitude of the positive impact. This observation agrees with the observations of Degree Centrality and Average Core Hubs.As the measures, Density,Degree Centrality and Average Core Hubs, overlap it make sense to select the one with the highest correlation and statistical significance i.e. Average Core Hubs.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Density
#| label: fig-Density
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-9
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-Density.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

````{=html}
<!--### Vectors

Some text @fig-Vectors

```{r}
#| fig-cap: Patient Matched PBMC's vs. Vectors
#| label: fig-Vectors
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-10
ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
```

{{< pagebreak >}}-->
````

### Betweenness Centrality

Betweenness Centrality measures the importance of a node based on the number of paths between two other nodes that pass through it. Betweenness Centrality is a guide to the influence nodes have over the flow of information, energy between others. Betweenness Centrality $x_i$ is given by $$x_i=\sum_{st}n^{i}_{st}$$ where $n^{i}_{st}$ is the node $i$ that lies on the shortest path from vertice $s$ to $t$.

Concretely we average the betweennes centrality $$ \langle x\rangle=\dfrac{1}{n}\sum_{i=1}^{n}x_i$$

In @fig-BetweennessCentrality we calculate the Betweenness Centrality for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one produces values that are mostly skewed towards the lower quartile while patient's two are skewed towards the upper quartile. The median of patient one is significantly higher.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance indicated by a $p-value<0.01$, with the matched PBMC's. Patient two shows a similar positive correlation in contrast to patient one that shows a correlation near to zero.

From these observations we could imply that impact of high number nodes in a system that are on the path between other nodes has a positive impact on the matched PBMC's. There is however a patient specific aspect in the magnitude of the positive impact.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Average Betweenness Centrality
#| label: fig-BetweennessCentrality
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-11
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-BetweennessCentrality.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Closeness Centrality

Closeness centrality of a node `u` is the reciprocal of the average shortest path distance to `u` over all `n-1` reachable nodes.

$$C(u) = \frac{n - 1}{\sum_{v=1}^{n-1} d(v, u)}$$,

where `d(v, u)` is the shortest-path distance between `v` and `u`,and `n` is the number of nodes that can reach `u`. Concretely we average the betweennes centrality $$ \langle c\rangle=\dfrac{1}{n}\sum_{u=1}^{n}c(u)$$

In @fig-ClosenessCentrality we calculate the Betweenness Centrality for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one produces values that are mostly skewed towards the lower quartile while patient two are evenly distributed. The median of patient one is significantly higher.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance indicated by a $p-value<0.05$, with the matched PBMC's. Patient one and two shows a similar positive correlation.

From these observations we could imply that,the impact of high number nodes in a system with a high number of shortest distances to all other nodes, has a positive impact on the matched PBMC's.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Closeness Centrality
#| label: fig-ClosenessCentrality
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-12
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-ClosenessCentrality.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Degree Pearson Correlation Coefficient

Measures the degree assortativity of a network i.e. the similarity of connections in the graph with respect to the node degree.It varies between −1 ≤ r ≤ 1: For r \< 0 the network is assortative, for r = 0 the network is neutral and for r \> 0 the network is disassortative.

In @fig-DegreePearsonCorrelationCoefficient we calculate the Degree Pearson correlation Coefficient for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are different. Patient one and two produce values that are mostly skewed towards the upper quartile but there is a significant difference in their medians.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance indicated by a $p-value<0.05$, with the matched PBMC's. Patient one and two show a similar positive correlation.

From these observations we could imply that,a high number similar connections between nodes in a system e.g. monomers,polymers,atoms has a positive impact on the matched PBMC's.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Degree Pearson Correlation Coefficient
#| label: fig-DegreePearsonCorrelationCoefficient
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-13
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-DegreePearsonCorrelationCoefficient.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Eigen Vector Centrality

In many circumstances a node's importance in a network is increased by having connections with other nodes that are themselves important. Eigenvector centrality is an extension of degree centrality that takes this factor into account. Eigenvector centrality awards to a node a number of points proportional to the centrality scores of its neighbors. The eigenvector centrality $x_i$ of node $i$ is defined to be proportional to the sum of the centralities of i's neighbors. The eigenvector centrality $x_i$ of node i is defined to be proportional to the sum of the centralities of i's neighbors

$$
x_i=k^{-1} \sum_{\text{nodes j}\\ \text{ neighbours of i}}x_j 
$$ In matrix notation $$x=k^{-1} Ax\\ Ax=kx$$ where x is the vector with elements equal to the centrality scores x_i and k is a constant. In other words, x is an eigenvector of the adjacency matrix.

In @fig-EigenVectorCentrality we calculate the average Eigen Vector Centrality for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are very similar. Patient one and two produce values that are mostly skewed towards the upper quartile with patient two having a longer tail.

Combined data of both patients show a positive Pearson correlation coefficient with no statistical significance , with the matched PBMC's. However patient two shows an inverse correlation in contrast to positive correlation of patient one.

From these observations we could imply that importance of this measure towards the impact on the matched PBMC's is not significant and it is patient specific.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Eigen Vector Centrality
#| label: fig-EigenVectorCentrality
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-14
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-EigenVectorCentrality.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Page Rank Centrality

If a node with high Katz centrality has edges pointing to many others, then all of those others also get high centrality. A high-centrality node pointing to one million others gives all one million of them high centrality. One could argue that this is not always appropriate. In many cases it means less if a node is only one among many that are pointed to. The centrality gained by virtue of receiving an edge from a prestigious node is diluted by being shared with so many others.

We can derive the following variant of Katz centrality in which the centrality we derive from the network neighbors is proportional to their centrality divided by their out-degree. $$x_i=α\sum_jA_{ij}\frac{x_j}{k_j^{out}} +β$$

In @fig-PageRankCentrality

we calculate the average Page Rank Centrality for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are very different. Patient one and two produce similar medians but patient one distribution is skewed toward the lower quartile and patient two toward the higher quartile.

Combined data of both patients show a positive Pearson correlation coefficient with statistical significance shown by a $p-value<0.05$, with the matched PBMC's. Patient two has similar correlation.

From these observations we could imply that systems with a high number of nodes that have a high centrality based on connections from nodes that on their turn have high centrality has a positive influence on the produced PMBC's. However this influence seems to be patient specific.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Page Rank Centrality
#| label: fig-PageRankCentrality
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-15
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-PageRankCentrality.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Attribute Assortativity Coefficient Source

Assortativity measures the similarity of connections in the graph with respect to the attribute source. In the generated multiplex structure the attribute "source" refers to the unique id of the node the edge originates from.

In @fig-AttributeAssortativityCoefficientSource we calculate the average Attribute Assortativity Coefficient for attribute Source for each system and look at its distribution and correlation with the particular patient and the measured matched PBMC's i.e. ELISpot values.

We see that the distributions for both patients are very different. Patient one and two produce similar medians but patient one distribution is skewed toward the upper quartile and patient two toward the lower quartile.

Combined data of both patients show a inverse Pearson correlation coefficient with statistical significance shown by a $p-value<0.05$, with the matched PBMC's. Patient one and two have similar correlation.

From these observations we could imply that systems with a more diverse unique node distribution have a higher likelihood to produce more PMBC's.

```{r}
#| fig-cap: Patient Matched PBMC's vs. Attribute Assortativity Coefficient Source
#| label: fig-AttributeAssortativityCoefficientSource
#| fig-pos: 'h'
#| fig-width: 7
#| fig-height: 5

row<-17
ggp1<-ggpairs(pationsOneandTwoNetworkAttrDf_corr,mapping = aes(color = Patient),columns = as.vector(as.matrix(combinations)[row,]))
ggsave("images/fig-AttributeAssortativityCoefficientSource.jpg", ggp1, dpi = 320)
ggp1
```

{{< pagebreak >}}

### Causality Graph

A Bayesian network is probabilistic model that represents the variables and their conditional dependencies as directed acyclic graph (DAG). In a DAG variables are represented as vertices and conditiononal dependencies as edges. Vertices that are not connected represent conditionally independent variables. Each node is associated with a probability function that takes in, a particular set of values for the node's parent variables, and gives the probability, or probability distribution, of the variable represented by the node.

As shown in @fig-causality, we apply a structure learning algorithm to the data in order to learn the structure of the directed acyclic graph (DAG) from the data. Concretely we apply Incremental Association (IAMB) algorithm, based on the Markov blanket detection algorithm of the same name, which is based on a two-phase selection scheme (a forward selection followed by an attempt to remove false positives).

Analyzing the DAG we see that the matched PBMC, vectors,Average core hubs, Attribute Assortativity Coefficient Source,Size largest component, Eigen vector Centrality and closeness centrality are conditionally dependent on the patient. This observation confirms observations made the correlation analysis. This indicates that system structures have patient specific attributes and their matched PBMC's are as well patient specific.

```{r}
# #| label: fig-causality
# #| fig-cap: Structure learning algorithms
# #| fig-pos: 'h'
# pationsOneandTwoNetworkAttrDf_caus<-copy(pationsOneandTwoNetworkAttrDf)
# pationsOneandTwoNetworkAttrDf_caus$patient<-as.factor(pationsOneandTwoNetworkAttrDf_caus$patient)
# names(pationsOneandTwoNetworkAttrDf_caus)<-c('Patient', "Size largest Component", "Avg. Spectral clustering", "Global Clustering Coeffiecient","Transitivity","Average degree","Average Clustering","Degree Centrality","Average Core hubs","Density","Vectors","Average Betweenness Centrality","Closeness Centrality","Degree Pearson Correlation Coefficient","Eigenvector Centrality","Page Rank Centrality", "Attribute Assortativity Coefficient Type","Attribute Assortativity Coefficient Source",'Matched PBMC')
# res =iamb.fdr(pationsOneandTwoNetworkAttrDf_caus,undirected = F)
# 
# # plot(res)
# # cpdag(res)
# # vstructs(res)
# res_graph<-as.igraph(res)
# res_graph<-simplify(res_graph)
# causality_graph<-ggraph(res_graph,layout = 'kk') +
#             geom_edge_link2 (arrow = arrow(length = unit(1.5, 'mm')),
#                          end_cap = circle(2, 'mm')) +
#             geom_node_point(aes(color=name,size=5),show.legend=FALSE) +
#             geom_node_label(aes(label = name,  ), repel = TRUE,alpha=0.6,size=2 ,show.legend=FALSE)+
#             theme_classic()+
#             theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5),
#                   line = element_blank(),
#               axis.text.x = element_blank(),
#               axis.text.y = element_blank(),
#               axis.ticks = element_blank()) +
#         xlab("") + ylab("")
# 
# ggsave("images/fig-causality.jpg", causality_graph, dpi = 320)
# causality_graph
```

![](images/fig-causality.jpg){#fig-causality fig-align="center" width="300"}

{{< pagebreak >}}

### Multivariate analysis of variance

Multivariate analysis of variance (MANOVA) is a statistical procedure for comparison of multivariate sample means. It is often used when there are two or more dependent variables and we wish to perform regression analysis and analysis of variance for them by one or more factor variables or covariates.

In our case we wish to determine which network topology attributes are highly significantly different among patients.

From the results shown in the following table, we see that Matched PBMC,Average Core hubs, Average Betweenness Centrality have a high statistical significance with $p-value<0.001$.

Closeness Centrality,Degree Pearson Correlation Coefficient, Page Rank Centrality,Attribute Assortativity Coefficient Source with $p-value<0.01$

Size largest Component, Response Degree Centrality,Density statistical sigificance with $p-value<0.05$

From this analysis we can conclude that there are indications that the produced PBMC values are statistically significantly different per patient together with a number of topological network attributes. This is agrees with the observations in the distributions and the correlations with the produced PDBC's.

```{r,results="asis",fig.pos='h'}
#| tbl-pos: 'h'
#| tbl-cap: MANOVA network topology attributes
#| label: MANOVAnetworktopologyattributes
panderOptions('knitr.auto.asis', FALSE)

pationsOneandTwoNetworkAttrDfManova<-copy(pationsOneandTwoNetworkAttrDf)

names(pationsOneandTwoNetworkAttrDfManova)<-c('Patient', "Size largest Component", "Laplacian clustering", "Global Clustering Coeffiecient","Transitivity","Average degree","Average Clustering","Degree Centrality","Average Core hubs","Density","Vectors","Average Betweenness Centrality","Closeness Centrality","Degree Pearson Correlation Coefficient","Eigenvector Centrality","Page Rank Centrality", "Attribute Assortativity Coefficient Type","Attribute Assortativity Coefficient Source",'Matched PBMC')
names_exc_patient<-c("Size largest Component", "Laplacian clustering", "Global Clustering Coeffiecient","Transitivity","Average degree","Average Clustering","Degree Centrality","Average Core hubs","Density","Vectors","Average Betweenness Centrality","Closeness Centrality","Degree Pearson Correlation Coefficient","Eigenvector Centrality","Page Rank Centrality", "Attribute Assortativity Coefficient Type","Attribute Assortativity Coefficient Source",'Matched PBMC')

res.man <- manova(as.matrix(pationsOneandTwoNetworkAttrDfManova[,c(names_exc_patient)]) ~ Patient, data = pationsOneandTwoNetworkAttrDfManova)
# pander(summary(res.man,tol=0), add.significance.stars = T)
pander(unclass(summary.aov(res.man)), add.significance.stars = T, keep.line.breaks = TRUE, style='grid')
stargazer(unclass(summary.aov(res.man)),out = "manovatable.tex")
# lapply(summary(aov(res.man)),kable)
# kable(summary.aov(res.man)[[1]], format="latex", booktabs=TRUE) %>% kable_styling(latex_options=c("scale_down",'HOLD_position')) 
# summary.aov(res.man)

# chuncked_names<-split(names_exc_patient, ceiling(seq_along(names_exc_patient)/5))
# results<-list()
# for (chunk_n in chuncked_names) {
#     res.man <- manova(as.matrix(pationsOneandTwoNetworkAttrDf[,c(chunk_n)]) ~ patient, data = pationsOneandTwoNetworkAttrDf)
#      anova_summary(res.man)
#       lapply(summary.aov(res.man),anova_summary)
# }
```

{{< pagebreak >}}

# Conclusion

From the performed data exploration we can conclude that particular data attributes have a patient specific distribution and correlation. This finding agrees with the general understanding that tumor mutations and reaction of immune system are patient and tumor specific and that a personalized approach is required. Additionally the data exploration shows that particular network attributes of the molecular structures are patient and tumor specific and that some of them show correlations with statistical significance with the produced PMBC values. That indicates that a machine learning approach that relies on these attributes as input can be applied to produce patient personalized predictions.
